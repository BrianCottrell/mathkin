"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const kin_sdk_1 = require("@kinecosystem/kin-sdk");
const config_1 = require("../config");
class TransactionBuilder {
    constructor(sourceAccount, options, channel) {
        this._transactionBuilder = new kin_sdk_1.TransactionBuilder(sourceAccount, options);
        this._appId = options.appId;
        this.addFee(options.fee);
        this.addMemo(options.memo ? options.memo : kin_sdk_1.Memo.text(""));
        this._channel = channel;
    }
    addFee(fee) {
        if (typeof fee === "number" && fee >= 0) {
            this._transactionBuilder.baseFee = fee;
        }
        else {
            throw new TypeError("Fee must be a positive number");
        }
        return this;
    }
    setTimeout(timeout) {
        this._transactionBuilder.setTimeout(timeout);
        return this;
    }
    addTextMemo(memo) {
        if (memo && typeof memo === "string" && memo.length > config_1.MEMO_LENGTH) {
            throw new Error(config_1.MEMO_LENGTH_ERROR);
        }
        this.addMemo(memo ? kin_sdk_1.Memo.text(memo) : kin_sdk_1.Memo.text(""));
    }
    addMemo(memo) {
        if (!memo) {
            throw new TypeError("Memo must be defined.");
        }
        if (typeof memo.value === "string" && memo.value.length > config_1.MEMO_LENGTH) {
            throw new Error(config_1.MEMO_LENGTH_ERROR);
        }
        if (memo.type === kin_sdk_1.MemoText) {
            this._transactionBuilder.addMemo(kin_sdk_1.Memo.text("1-" + this._appId + "-" + memo.value));
        }
        else {
            this._transactionBuilder.addMemo(memo);
        }
        return this;
    }
    addOperation(operation) {
        this._transactionBuilder.addOperation(operation);
        return this;
    }
    get channel() {
        return this._channel;
    }
    build() {
        return this._transactionBuilder.build();
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=transactionBuilder.js.map