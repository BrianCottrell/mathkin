"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const utils_1 = require("../utils");
class AccountDataRetriever {
    constructor(_server) {
        this._server = _server;
        this._server = _server;
    }
    fetchAccountData(address) {
        return __awaiter(this, void 0, void 0, function* () {
            yield utils_1.Utils.verifyValidAddressParamAsync(address);
            try {
                const accountResponse = yield this._server.loadAccount(address);
                return {
                    id: accountResponse.id,
                    accountId: accountResponse.account_id,
                    sequenceNumber: parseInt(accountResponse.sequenceNumber()),
                    pagingToken: accountResponse.paging_token,
                    subentryCount: accountResponse.subentry_count,
                    thresholds: {
                        highThreshold: accountResponse.thresholds.high_threshold,
                        medThreshold: accountResponse.thresholds.med_threshold,
                        lowThreshold: accountResponse.thresholds.low_threshold
                    },
                    signers: this.extractSigners(accountResponse),
                    data: accountResponse.data_attr,
                    balances: this.extractBalances(accountResponse),
                    flags: {
                        authRequired: accountResponse.flags.auth_required,
                        authRevocable: accountResponse.flags.auth_revocable
                    }
                };
            }
            catch (e) {
                throw errors_1.ErrorDecoder.translate(e);
            }
        });
    }
    fetchKinBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let balance = 0;
            const accountData = yield this.fetchAccountData(address);
            for (let accountBalance of accountData.balances) {
                if (accountBalance.assetType === "native") {
                    balance = accountBalance.balance;
                    break;
                }
            }
            return balance;
        });
    }
    isAccountExisting(address) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.fetchAccountData(address);
                return true;
            }
            catch (e) {
                if (e.type === "ResourceNotFoundError") {
                    return false;
                }
                else {
                    throw e;
                }
            }
        });
    }
    extractSigners(accountResponse) {
        const signers = new Array();
        for (let account of accountResponse.signers) {
            signers.push({
                publicKey: account.public_key,
                weight: account.weight
            });
        }
        return signers;
    }
    extractBalances(accountResponse) {
        const balances = new Array();
        for (let stellarBalance of accountResponse.balances) {
            let assetCode = undefined;
            let assetIssuer = undefined;
            let limit = undefined;
            if (this.isBalanceLineAsset(stellarBalance)) {
                assetCode = stellarBalance.asset_code;
                assetIssuer = stellarBalance.asset_issuer;
                limit = parseFloat(stellarBalance.limit);
            }
            balances.push({
                assetType: stellarBalance.asset_type,
                balance: parseFloat(stellarBalance.balance),
                assetCode: assetCode,
                assetIssuer: assetIssuer,
                limit: limit
            });
        }
        return balances;
    }
    isBalanceLineAsset(balanceLine) {
        return balanceLine.asset_issuer !== undefined;
    }
}
exports.AccountDataRetriever = AccountDataRetriever;
//# sourceMappingURL=accountDataRetriever.js.map