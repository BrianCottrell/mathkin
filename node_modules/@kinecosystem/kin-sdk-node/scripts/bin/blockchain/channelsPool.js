"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const keyPair_1 = require("./keyPair");
const errors_1 = require("../errors");
class ChannelsPool {
    constructor(seeds) {
        this.channels = [];
        this.channels = seeds.map(seed => ({ keyPair: keyPair_1.KeyPair.fromSeed(seed), state: 'free' }));
    }
    getFreeChannels() {
        return this.channels.filter(channel => channel.state == 'free');
    }
    acquireChannel(func) {
        return __awaiter(this, void 0, void 0, function* () {
            let freeChannels = this.getFreeChannels();
            if (freeChannels.length == 0) {
                throw new errors_1.ChannelBusyError();
            }
            const randomIndex = Math.floor(Math.random() * freeChannels.length);
            const freeChannel = freeChannels[randomIndex];
            freeChannel.state = 'busy';
            try {
                return yield func(freeChannel);
            }
            finally {
                this.releaseChannel(freeChannel);
            }
        });
    }
    get status() {
        const freeChannels = this.getFreeChannels().length;
        return {
            totalChannels: this.channels.length,
            freeChannels: freeChannels,
            busyChannels: this.channels.length - freeChannels,
            channels: this.channels.map(channel => ({ keyPair: channel.keyPair, state: channel.state }))
        };
    }
    releaseChannel(channel) {
        channel.state = 'free';
    }
}
exports.ChannelsPool = ChannelsPool;
//# sourceMappingURL=channelsPool.js.map