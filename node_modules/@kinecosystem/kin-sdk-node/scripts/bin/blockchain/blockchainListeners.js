"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactionRetriever_1 = require("./transactionRetriever");
const utils_1 = require("../utils");
class BlockchainListener {
    constructor(_server) {
        this._server = _server;
        this._server = _server;
    }
    createPaymentsListener(onPayment, addresses) {
        return new MultiAccountsListener(this._server, onPayment, addresses);
    }
}
exports.BlockchainListener = BlockchainListener;
class MultiAccountsListener {
    constructor(server, _onPayment, addresses) {
        this._onPayment = _onPayment;
        this._addresses = new Set();
        if (addresses) {
            for (const address of addresses) {
                utils_1.Utils.verifyValidAddressParam(address);
                this._addresses.add(address);
            }
        }
        this._stream = server.transactions().cursor('now').stream({
            onmessage: (txRecord) => {
                let payment = transactionRetriever_1.TransactionRetriever.fromStellarTransaction(txRecord);
                if (payment.amount && payment.destination &&
                    (this._addresses.has(payment.source) || this._addresses.has(payment.destination))) {
                    _onPayment(payment);
                }
            }
        });
    }
    addAddress(address) {
        utils_1.Utils.verifyValidAddressParam(address);
        this._addresses.add(address);
    }
    removeAddress(address) {
        utils_1.Utils.verifyValidAddressParam(address);
        this._addresses.delete(address);
    }
    close() {
        this._stream();
    }
}
//# sourceMappingURL=blockchainListeners.js.map