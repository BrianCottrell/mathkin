"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
class Friendbot {
    constructor(_url, _accountDataRetriever) {
        this._url = _url;
        this._accountDataRetriever = _accountDataRetriever;
        this._url = _url;
        this._accountDataRetriever = _accountDataRetriever;
    }
    createOrFund(address, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            yield utils_1.Utils.verifyValidAddressParamAsync(address);
            const isAccountExisting = yield this._accountDataRetriever.isAccountExisting(address);
            const requestUrl = isAccountExisting ? this.fundUrl(address, amount) : this.createAccountUrl(address, amount);
            let response;
            try {
                response = yield axios_1.default.get(requestUrl);
            }
            catch (e) {
                if (e.response) {
                    response = e.response;
                }
                else {
                    throw new errors_1.NetworkError(e);
                }
            }
            return this.parseResponse(response);
        });
    }
    parseResponse(response) {
        if (response.status === 200 && response.data.hash) {
            return response.data.hash;
        }
        else {
            throw new errors_1.FriendbotError(response.status, response.data, response.data.title);
        }
    }
    fundUrl(address, amount) {
        return `${this._url}/fund?addr=${address}&amount=${amount}`;
    }
    createAccountUrl(address, amount) {
        return `${this._url}/?addr=${address}&amount=${amount}`;
    }
}
exports.Friendbot = Friendbot;
//# sourceMappingURL=friendbot.js.map