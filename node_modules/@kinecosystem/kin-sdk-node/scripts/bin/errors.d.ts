export interface ErrorResponse {
    type: string;
    title: string;
    status: number;
    detail?: string;
    extras?: any;
}
export declare type ErrorType = 'AccountNotFoundError' | 'NetworkError' | 'ServerError' | 'FriendbotError' | 'InvalidAddressError' | 'ChannelBusyError' | 'NetworkMismatchedError' | 'InvalidDataError' | 'BadRequestError' | 'InternalError' | 'AccountExistsError' | 'LowBalanceError' | 'AccountNotActivatedError' | 'HorizonError' | 'ResourceNotFoundError';
export interface KinSdkError extends Error {
    readonly type: ErrorType;
}
export declare class HorizonError extends Error implements KinSdkError {
    readonly msg: string;
    readonly errorBody: ErrorResponse;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    private readonly _resultTransactionCode?;
    private readonly _resultOperationsCode?;
    readonly errorCode: number;
    constructor(msg: string, errorBody: ErrorResponse, title?: string | undefined);
    readonly resultTransactionCode: string | undefined;
    readonly resultOperationsCode: string[] | undefined;
}
export declare class AccountNotFoundError extends HorizonError {
    readonly errorBody: ErrorResponse;
    readonly title?: string | undefined;
    readonly errorCode: number;
    readonly type: ErrorType;
    constructor(errorBody: ErrorResponse, title?: string | undefined);
}
export declare class NetworkError extends Error implements KinSdkError {
    readonly error: any;
    readonly type = "NetworkError";
    constructor(error: any);
}
export declare class NetworkMismatchedError extends Error implements KinSdkError {
    readonly type = "NetworkMismatchedError";
    constructor(message: string);
}
export declare class InvalidDataError extends Error implements KinSdkError {
    readonly type = "InvalidDataError";
    constructor();
}
export declare class ServerError extends HorizonError {
    readonly errorBody: any;
    readonly type: ErrorType;
    constructor(errorBody: any);
}
export declare class FriendbotError extends Error implements KinSdkError {
    readonly errorCode?: number | undefined;
    readonly extra?: any;
    readonly msg?: string | undefined;
    readonly type: ErrorType;
    constructor(errorCode?: number | undefined, extra?: any, msg?: string | undefined);
}
export declare class InvalidAddressError extends Error implements KinSdkError {
    readonly type: ErrorType;
    constructor();
}
export declare class ChannelBusyError extends Error implements KinSdkError {
    readonly type: ErrorType;
    constructor();
}
export declare class BadRequestError extends HorizonError {
    readonly errorBody: ErrorResponse;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    constructor(errorBody: ErrorResponse, title?: string | undefined);
}
export declare class InternalError extends HorizonError {
    readonly errorBody: any;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    constructor(errorBody: any, title?: string | undefined);
}
export declare class AccountExistsError extends HorizonError {
    readonly errorBody: any;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    constructor(errorBody: any, title?: string | undefined);
}
export declare class LowBalanceError extends HorizonError {
    readonly errorBody: ErrorResponse;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    constructor(errorBody: ErrorResponse, title?: string | undefined);
}
export declare class AccountNotActivatedError extends HorizonError {
    readonly errorBody: ErrorResponse;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    constructor(errorBody: ErrorResponse, title?: string | undefined);
}
export declare class ResourceNotFoundError extends HorizonError {
    readonly errorBody: ErrorResponse;
    readonly title?: string | undefined;
    readonly type: ErrorType;
    constructor(errorBody: ErrorResponse, title?: string | undefined);
}
export declare class ErrorDecoder {
    static translate(errorBody?: any): HorizonError | NetworkError;
    static translateOperationError(errorCode: number, errorBody?: any): HorizonError;
    static translateTransactionError(errorCode: number, errorBody?: any): HorizonError;
    static translateHorizonError(errorCode: number, errorBody?: any): HorizonError;
    static includesObject(type: string, list: string[]): boolean;
}
