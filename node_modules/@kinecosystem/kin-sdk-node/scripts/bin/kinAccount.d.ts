import { AccountData, Balance } from "./blockchain/horizonModels";
import { Server } from "@kinecosystem/kin-sdk";
import { AccountDataRetriever } from "./blockchain/accountDataRetriever";
import { Address, TransactionId, WhitelistPayload } from "./types";
import { TransactionBuilder } from "./blockchain/transactionBuilder";
import { Channel, ChannelsPool } from "./blockchain/channelsPool";
import { IBlockchainInfoRetriever } from "./blockchain/blockchainInfoRetriever";
export declare class KinAccount {
    private readonly _seed;
    private readonly _accountDataRetriever;
    private readonly _appId;
    private readonly _channelSecretKeys?;
    private readonly _keypair;
    private readonly _txSender;
    private readonly _publicAddress;
    private readonly _channelsPool?;
    constructor(_seed: string, _accountDataRetriever: AccountDataRetriever, server: Server, blockchainInfoRetriever: IBlockchainInfoRetriever, _appId?: string, _channelSecretKeys?: string[] | undefined);
    readonly publicAddress: Address;
    readonly appId: string;
    readonly channelsPool: ChannelsPool | undefined;
    getBalance(): Promise<Balance>;
    getData(): Promise<AccountData>;
    getTransactionBuilder(param: GetTransactionParams): Promise<TransactionBuilder>;
    buildCreateAccount(params: CreateAccountParams): Promise<TransactionBuilder>;
    buildSendKin(params: SendKinParams): Promise<TransactionBuilder>;
    submitTransaction(transactionBuilder: TransactionBuilder): Promise<TransactionId>;
    whitelistTransaction(payload: string | WhitelistPayload): string;
}
export interface CreateAccountParams {
    address: Address;
    startingBalance: number;
    fee: number;
    memoText?: string;
    channel?: Channel;
}
export interface SendKinParams {
    address: Address;
    amount: number;
    fee: number;
    memoText?: string;
    channel?: Channel;
}
export interface GetTransactionParams {
    fee: number;
    channel?: Channel;
}
