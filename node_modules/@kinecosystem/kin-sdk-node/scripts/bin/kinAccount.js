"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const txSender_1 = require("./blockchain/txSender");
const config = require("./config");
const keyPair_1 = require("./blockchain/keyPair");
const channelsPool_1 = require("./blockchain/channelsPool");
class KinAccount {
    constructor(_seed, _accountDataRetriever, server, blockchainInfoRetriever, _appId = config.ANON_APP_ID, _channelSecretKeys) {
        this._seed = _seed;
        this._accountDataRetriever = _accountDataRetriever;
        this._appId = _appId;
        this._channelSecretKeys = _channelSecretKeys;
        if (!config.APP_ID_REGEX.test(_appId)) {
            throw new Error("Invalid app id: " + _appId);
        }
        if (_channelSecretKeys) {
            this._channelsPool = new channelsPool_1.ChannelsPool(_channelSecretKeys);
        }
        this._keypair = keyPair_1.KeyPair.fromSeed(_seed);
        this._publicAddress = this._keypair.publicAddress;
        this._txSender = new txSender_1.TxSender(this._keypair, this._appId, server, blockchainInfoRetriever);
    }
    get publicAddress() {
        return this._keypair.publicAddress;
    }
    get appId() {
        return this._appId;
    }
    get channelsPool() {
        return this._channelsPool;
    }
    getBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._accountDataRetriever.fetchKinBalance(this.publicAddress);
        });
    }
    getData() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._accountDataRetriever.fetchAccountData(this.publicAddress);
        });
    }
    getTransactionBuilder(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._txSender.getTransactionBuilder(param.fee, param.channel);
        });
    }
    buildCreateAccount(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._txSender.buildCreateAccount(params.address, params.startingBalance, params.fee, params.memoText, params.channel);
        });
    }
    buildSendKin(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._txSender.buildSendKin(params.address, params.amount, params.fee, params.memoText, params.channel);
        });
    }
    submitTransaction(transactionBuilder) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._txSender.submitTransaction(transactionBuilder);
        });
    }
    whitelistTransaction(payload) {
        return this._txSender.whitelistTransaction(payload);
    }
}
exports.KinAccount = KinAccount;
//# sourceMappingURL=kinAccount.js.map