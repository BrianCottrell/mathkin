import { Environment } from "./environment";
import { KinAccount } from "./kinAccount";
import { AccountData, Balance, OnPaymentListener, PaymentListener, RawTransaction, Transaction } from "./blockchain/horizonModels";
import { Address, TransactionId } from "./types";
export declare class KinClient {
    private readonly _environment;
    private readonly _server;
    private readonly _accountDataRetriever;
    private readonly _friendbotHandler;
    private readonly _blockchainInfoRetriever;
    private readonly _transactionRetriever;
    private readonly _blockchainListener;
    constructor(_environment: Environment);
    readonly environment: Environment;
    createKinAccount(params: CreateKinAccountParams): KinAccount;
    getMinimumFee(): Promise<number>;
    getAccountBalance(address: Address): Promise<Balance>;
    isAccountExisting(address: Address): Promise<boolean>;
    getAccountData(address: Address): Promise<AccountData>;
    getTransactionData(transactionId: TransactionId): Promise<Transaction>;
    getRawTransactionData(transactionId: TransactionId): Promise<RawTransaction>;
    getTransactionHistory(params: TransactionHistoryParams): Promise<Transaction[]>;
    getRawTransactionHistory(params: TransactionHistoryParams): Promise<RawTransaction[]>;
    createPaymentListener(params: PaymentListenerParams): PaymentListener;
    friendbot(params: FriendBotParams): Promise<TransactionId>;
}
export interface TransactionHistoryParams {
    address: Address;
    limit?: number;
    order?: "asc" | "desc";
    cursor?: string;
}
export interface PaymentListenerParams {
    onPayment: OnPaymentListener;
    addresses: Address[];
}
export interface CreateKinAccountParams {
    seed: string;
    appId?: string;
    channelSecretKeys?: string[];
}
export interface FriendBotParams {
    address: Address;
    amount: number;
}
